import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@components/ui/tooltip';
import React from 'react';
import { Button } from '@components/ui/button';
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@components/ui/dialog';
import styles from '../styles/note-post.module.scss';
import { useForm } from 'react-hook-form';
import ReCAPTCHA from 'react-google-recaptcha';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@components/ui/form';
import { Checkbox } from '@/components/ui/checkbox';
import { LuAlertTriangle, LuSendHorizonal } from 'react-icons/lu';
import { Textarea } from '@components/ui/textarea';
import { Input } from '@components/ui/input';
import { cn } from '@common/utils';

type NotePostProps = object;

const NotePost: React.FC<NotePostProps> = () => {
  const [isAcceptCapcha, setIsAcceptCapcha] = React.useState<boolean>(false);

  const formSchema = z.object({
    fullname: z.string().min(2, {
      message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç t√™n',
    }),
    phoneNumber: z
      .string()
      .min(1, {
        message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng',
      })
      .min(7, {
        message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá',
      })
      .max(10, {
        message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá',
      }),
    email: z
      .string()
      .email({
        message: 'Vui l√≤ng nh·∫≠p email ƒë√∫ng ƒë·ªãnh d·∫°ng',
      })
      .optional() // Cho ph√©p b·ªè qua n·∫øu kh√¥ng nh·∫≠p g√¨
      .or(z.literal('')),
    other: z.string(),
    reason_options: z.array(z.string()).refine((value) => value.some((item) => item), {
      message: 'You have to select at least one item.',
    }),
  });
  const form = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      fullname: '',
      phoneNumber: '',
      email: '',
      other: '',
      reason_options: [],
    },
  });
  const { handleSubmit, control, reset } = form;
  function onSubmit(values: z.infer<typeof formSchema>) {
    setIsAcceptCapcha(false);
    console.log('üê¥ values', values);
  }
  const onChageCapcha = (value: A) => {
    console.log('ü´í value', value);
    setIsAcceptCapcha(true);
  };
  const listReasonOtion = [
    {
      id: 'incorrect address',
      label: 'ƒê·ªãa ch·ªâ c·ªßa b·∫•t ƒë·ªông s·∫£n sai',
    },
    {
      id: 'incorrect image',
      label: '·∫¢nh kh√¥ng ch√≠nh x√°c',
    },
    {
      id: 'duplicate post',
      label: 'Tr√πng v·ªõi tin rao kh√°c',
    },
    {
      id: 'can not contact',
      label: 'Kh√¥ng li√™n l·∫°c ƒë∆∞·ª£c',
    },
    {
      id: 'wrong post',
      label: 'Tin kh√¥ng th·∫≠t',
    },
    {
      id: 'estate selled',
      label: 'B·∫•t ƒë·ªông s·∫£n ƒë√£ b√°n',
    },
  ];
  const dialogReportPost = () => {
    return (
      <Dialog
        onOpenChange={() => {
          reset();
        }}
      >
        <TooltipProvider delayDuration={0}>
          <Tooltip>
            <DialogTrigger asChild>
              <TooltipTrigger asChild>
                <Button variant={'outline'}>
                  <LuAlertTriangle className="mr-2" />
                  Ph·∫£n √°nh/B√°o x·∫•u
                </Button>
              </TooltipTrigger>
            </DialogTrigger>
            <TooltipContent>
              <p className="text-center">
                B√°o c√°o tin rao c√≥ n·ªôi
                <br /> dung kh√¥ng ƒë√∫ng
              </p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        <DialogContent className="pt-4 sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>B√°o c√°o tin rao c√≥ n·ªôi dung kh√¥ng ƒë√∫ng</DialogTitle>
          </DialogHeader>
          <Form {...form}>
            <form
              className={cn('grid gap-4', styles.dialog_content)}
              onSubmit={handleSubmit(onSubmit)}
            >
              <div className="flex flex-col gap-y-2">
                <FormField
                  control={form.control}
                  name="reason_options"
                  render={() => (
                    <FormItem>
                      <div className="mb-4">
                        <FormLabel className="text-base">Vui l√≤ng ch·ªçn l√Ω do</FormLabel>
                      </div>
                      {listReasonOtion.map((item) => (
                        <FormField
                          key={item.id}
                          control={form.control}
                          name="reason_options"
                          render={({ field }) => {
                            return (
                              <FormItem
                                key={item.id}
                                className="flex flex-row items-start space-x-3 space-y-0"
                              >
                                <FormControl>
                                  <Checkbox
                                    checked={field.value?.includes(item.id as never)}
                                    onCheckedChange={(checked: boolean) => {
                                      return checked
                                        ? field.onChange([...field.value, item.id])
                                        : field.onChange(
                                            field.value?.filter((value) => value !== item.id),
                                          );
                                    }}
                                  />
                                </FormControl>
                                <FormLabel className="font-normal">{item.label}</FormLabel>
                              </FormItem>
                            );
                          }}
                        />
                      ))}
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="flex flex-col gap-y-2">
                <FormField
                  control={control}
                  name="other"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel htmlFor="message" className="text-left">
                        Ph·∫£n h·ªìi kh√°c
                      </FormLabel>
                      <FormControl>
                        <Textarea className={styles.message_input} id="other" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <div className="flex flex-col gap-y-2">
                <FormField
                  control={control}
                  name="fullname"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel aria-required htmlFor="fullname" className="text-left">
                        H·ªç v√† t√™n
                      </FormLabel>
                      <FormControl>
                        <Input id="fullname" placeholder="Nh·∫≠p h·ªç v√† t√™n" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <div className="flex flex-col gap-y-2">
                <FormField
                  control={control}
                  name="phoneNumber"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel aria-required htmlFor="phoneNumber" className="text-left">
                        S·ªë ƒëi·ªán tho·∫°i
                      </FormLabel>
                      <FormControl>
                        <Input
                          type="number"
                          id="phoneNumber"
                          placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <div className="flex flex-col gap-y-2">
                <FormField
                  control={control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel htmlFor="email" className="text-left">
                        Email
                      </FormLabel>
                      <FormControl>
                        <Input type="email" id="email" placeholder="Nh·∫≠p email" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <ReCAPTCHA
                sitekey={process.env.NEXT_PUBLIC_CAPCHA_SITE_KEY as string}
                onChange={onChageCapcha}
                hl="vi"
              />
              <DialogFooter>
                <DialogClose asChild>
                  <Button type="button" variant="ghost">
                    ƒê√≥ng
                  </Button>
                </DialogClose>
                <Button
                  disabled={!isAcceptCapcha}
                  className="flex items-center gap-x-2"
                  type="submit"
                >
                  G·ª≠i y√™u c·∫ßu
                  <LuSendHorizonal />
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
    );
  };
  return (
    <div className="important-note">
      <h2 className="pb-2 text-lg font-semibold">L∆∞u √Ω : </h2>
      <p className="mb-2 text-xs text-slate-500">
        Qu√Ω v·ªã ƒëang xem n·ªôi dung tin rao{' '}
        <strong>
          &quot;B√°n cƒÉn nh√† ƒë∆∞·ªùng V√µ Oanh, H·∫ªm xe h∆°i 5x15,1 Tr·ªát 2 l·∫ßu/ 1 tum, nh√† ki√™n c·ªë ·ªü li·ªÅn,
          Gi√° 15ty &quot; - M√£ tin 250809
        </strong>
        . M·ªçi th√¥ng tin, n·ªôi dung li√™n quan t·ªõi tin rao n√†y l√† do ng∆∞·ªùi ƒëƒÉng tin ƒëƒÉng t·∫£i v√† ch·ªãu
        tr√°ch nhi·ªám. Chuannhadat.com lu√¥n c·ªë g·∫Øng ƒë·ªÉ c√°c th√¥ng tin ƒë∆∞·ª£c h·ªØu √≠ch nh·∫•t cho qu√Ω v·ªã tuy
        nhi√™n Chuannhadat.com kh√¥ng ƒë·∫£m b·∫£o v√† kh√¥ng ch·ªãu tr√°ch nhi·ªám v·ªÅ b·∫•t k·ª≥ th√¥ng tin, n·ªôi dung
        n√†o li√™n quan t·ªõi tin rao n√†y. Tr∆∞·ªùng h·ª£p ph√°t hi·ªán n·ªôi dung tin ƒëƒÉng kh√¥ng ch√≠nh x√°c. Qu√Ω
        v·ªã h√£y cung c·∫•p th√¥ng tin cho Chuannhadat.com b·∫±ng c√°ch g·ª≠i{' '}
        <strong>&quot; Ph·∫£n √°nh / B√°o x·∫•u &quot; </strong>
        ƒë·ªÉ Ban qu·∫£n tr·ªã ki·ªÉm tra l·∫°i th√¥ng tin b√†i ƒëƒÉng nhanh v√† k·ªãp th·ªùi nh·∫•t.
      </p>
      {dialogReportPost()}
    </div>
  );
};

export default NotePost;
