{
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit"
  },
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "typescript.preferences.importModuleSpecifier": "non-relative",
  "javascript.preferences.importModuleSpecifier": "non-relative",
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.expand": false,
  "workbench.editor.wrapTabs": true,
  "typescript.updateImportsOnFileMove.enabled": "always",

  // Feature-Driven Development folder structure recommendations
  "workspace.recommended.structure": {
    "src/app/(frontend)/_components": "Main frontend features directory (co-located with Next.js App Router)",
    "src/app/(frontend)/_components/[FeatureName]": "Feature named in PascalCase (e.g., CategoryPage, PostDetail, ProfileDetail)",
    "src/app/(frontend)/_components/[FeatureName]/components": "Components specific to the feature",
    "src/app/(frontend)/_components/[FeatureName]/hooks": "Custom hooks used by the feature",
    "src/app/(frontend)/_components/[FeatureName]/types": "TypeScript types for the feature (or type.ts)",
    "src/app/(frontend)/_components/[FeatureName]/constants": "Constants used by the feature",
    "src/app/(frontend)/_components/[FeatureName]/states": "State management for the feature (Jotai atoms)",
    "src/app/(frontend)/_components/[FeatureName]/styles": "Feature-specific styles (SCSS modules)",
    "src/app/(frontend)/_components/[FeatureName]/mobile": "Mobile-specific components for the feature",
    "src/app/dashboard/_components": "Dashboard features directory",
    "src/views": "Legacy shared components and dashboard features (being phased out)",
    "src/common": "Shared utilities across features",
    "src/hooks": "Shared hooks across features",
    "src/components": "Shared components across features",
    "src/api": "Shared API functions across features"
  },

  // File templates for new frontend features
  "files.newFeature.templates": {
    "index.tsx": "import { getUserAgentInfo } from '@common/getUserAgentInfo';\nimport FeatureDesktop from './FeatureDesktop';\nimport FeatureMobile from './FeatureMobile';\n\nexport default async function FeatureName() {\n  const { isMobile } = await getUserAgentInfo();\n  return isMobile ? <FeatureMobile /> : <FeatureDesktop />;\n}",
    "FeatureDesktop.tsx": "'use client';\n\nexport default function FeatureDesktop() {\n  return (\n    <div>\n      {/* Desktop implementation */}\n    </div>\n  );\n}",
    "FeatureMobile.tsx": "'use client';\n\nexport default function FeatureMobile() {\n  return (\n    <div>\n      {/* Mobile implementation */}\n    </div>\n  );\n}",
    "components/index.ts": "// Export feature-specific components\n",
    "hooks/index.ts": "// Export feature-specific hooks\n",
    "states.tsx": "import { atom } from 'jotai';\n\n// Feature-specific atoms\n",
    "type.ts": "// Feature-specific TypeScript types\n",
    "styles/Feature.module.scss": "// Feature-specific styles\n"
  },

  // File associations
  "files.associations": {
    "*/app/(frontend)/_components/*/components/*.tsx": "typescriptreact",
    "*/app/(frontend)/_components/*/hooks/*.ts": "typescript",
    "*/app/(frontend)/_components/*/states.tsx": "typescriptreact",
    "*/app/(frontend)/_components/*/type.ts": "typescript",
    "*/app/(frontend)/_components/*/styles/*.scss": "scss",
    "*/app/dashboard/_components/*/components/*.tsx": "typescriptreact",
    "*/views/*/apis/*.ts": "typescript",
    "*/views/*/components/*.tsx": "typescriptreact",
    "*/views/*/hooks/*.ts": "typescript",
    "*/views/*/types/*.ts": "typescript",
    "*/views/*/constants/*.ts": "typescript"
  },

  // UI Development Guidelines
  "ui.development.guidelines": {
    "assistantRole": "Senior Frontend UI Engineer",
    "beforeUiImplementation": "Consult Claude as a Senior Frontend UI Engineer for optimized solutions",
    "uiComponentGoals": [
      "Responsiveness across all device sizes",
      "Accessibility compliance (WCAG 2.1)",
      "Consistent styling with existing components",
      "Performance optimization",
      "Reusability"
    ]
  },

  // Path aliases for IntelliSense
  "typescript.preferences.includePackageJsonAutoImports": "on",
  "typescript.suggest.autoImports": true,
  "typescript.suggest.paths": true,

  // Frontend feature development guidelines
  "frontend.development.guidelines": {
    "featureStructure": "Co-located with Next.js App Router in src/app/(frontend)/_components/[FeatureName]",
    "importAliases": {
      "@frontend/[FeatureName]": "For importing from other features",
      "@dashboard/[FeatureName]": "For dashboard features",
      "@common/*": "For shared utilities"
    },
    "namingConventions": {
      "features": "PascalCase (e.g., CategoryPage, PostDetail)",
      "components": "PascalCase with descriptive names",
      "hooks": "camelCase starting with 'use'",
      "atoms": "camelCase ending with 'Atom'"
    },
    "responsiveDesign": "Always implement both Desktop and Mobile components"
  },

  // Snippet prefixes for quick feature development
  "editor.snippetSuggestions": "top",
  "editor.suggest.showSnippets": true
}
