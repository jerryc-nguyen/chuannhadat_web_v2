{
  "Create React Component (FDD)": {
    "prefix": "fdd-component",
    "body": [
      "'use client';",
      "",
      "import React from 'react';",
      "import { cn } from '@/lib/utils';",
      "",
      "interface ${1:ComponentName}Props {",
      "  className?: string;",
      "  children?: React.ReactNode;",
      "  // Add more props here",
      "}",
      "",
      "/**",
      " * ${1:ComponentName} Component",
      " * ",
      " * @description",
      " * ${2:Description of the component and its usage}",
      " * ",
      " * @example",
      " * ```tsx",
      " * <${1:ComponentName}>Content</${1:ComponentName}>",
      " * ```",
      " */",
      "export const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({",
      "  className,",
      "  children,",
      "  // Destructure more props here",
      "  ...props",
      "}) => {",
      "  return (",
      "    <div className={cn('${3:default-classnames}', className)} {...props}>",
      "      {children}",
      "    </div>",
      "  );",
      "};",
      "",
    ],
    "description": "Create a React component following FDD pattern with best practices",
  },
  "Create Form Component (FDD)": {
    "prefix": "fdd-form",
    "body": [
      "'use client';",
      "",
      "import { zodResolver } from '@hookform/resolvers/zod';",
      "import React from 'react';",
      "import { useForm } from 'react-hook-form';",
      "import { z } from 'zod';",
      "import { Button } from '@/components/ui/button';",
      "import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';",
      "",
      "// Define form schema",
      "const ${1:formName}Schema = z.object({",
      "  ${2:field}: z.string().min(1, { message: 'This field is required' }),",
      "  // Add more fields here",
      "});",
      "",
      "// Create type from schema",
      "type ${1:formName}Values = z.infer<typeof ${1:formName}Schema>;",
      "",
      "interface ${1:formName}Props {",
      "  onSubmit?: (values: ${1:formName}Values) => void;",
      "  className?: string;",
      "  // Add more props here",
      "}",
      "",
      "/**",
      " * ${1:formName} Form Component",
      " * ",
      " * @description",
      " * ${3:Description of the form and its usage}",
      " * ",
      " * @example",
      " * ```tsx",
      " * <${1:formName} onSubmit={handleSubmit} />",
      " * ```",
      " */",
      "export const ${1:formName}: React.FC<${1:formName}Props> = ({",
      "  onSubmit,",
      "  className,",
      "  // Destructure more props here",
      "}) => {",
      "  const form = useForm<${1:formName}Values>({",
      "    resolver: zodResolver(${1:formName}Schema),",
      "    defaultValues: {",
      "      ${2:field}: '',",
      "      // Add more default values",
      "    },",
      "  });",
      "",
      "  const handleSubmit = (values: ${1:formName}Values) => {",
      "    onSubmit?.(values);",
      "  };",
      "",
      "  return (",
      "    <Form {...form}>",
      "      <form onSubmit={form.handleSubmit(handleSubmit)} className={className}>",
      "        <FormField",
      "          control={form.control}",
      "          name=\"${2:field}\"",
      "          render={({ field }) => (",
      "            <FormItem>",
      "              <FormLabel>${4:Field Label}</FormLabel>",
      "              <FormControl>",
      "                <input {...field} className=\"${5:input-class}\" />",
      "              </FormControl>",
      "              <FormMessage />",
      "            </FormItem>",
      "          )}",
      "        />",
      "        {/* Add more form fields here */}",
      "",
      "        <Button type=\"submit\" className=\"mt-4\">Submit</Button>",
      "      </form>",
      "    </Form>",
      "  );",
      "};",
      "",
    ],
    "description": "Create a form component with React Hook Form and Zod validation",
  },
  "Create Responsive Component (FDD)": {
    "prefix": "fdd-responsive",
    "body": [
      "'use client';",
      "",
      "import React from 'react';",
      "import { useIsMobile } from '@/hooks/useIsMobile';",
      "import { cn } from '@/lib/utils';",
      "",
      "interface ${1:ComponentName}Props {",
      "  className?: string;",
      "  children?: React.ReactNode;",
      "  // Add more props here",
      "}",
      "",
      "/**",
      " * ${1:ComponentName} Component",
      " * ",
      " * @description",
      " * ${2:Description of the component and its usage}",
      " * Automatically adapts to mobile and desktop layouts",
      " * ",
      " * @example",
      " * ```tsx",
      " * <${1:ComponentName}>Content</${1:ComponentName}>",
      " * ```",
      " */",
      "export const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({",
      "  className,",
      "  children,",
      "  // Destructure more props here",
      "  ...props",
      "}) => {",
      "  const isMobile = useIsMobile();",
      "",
      "  return (",
      "    <div",
      "      className={cn(",
      "        '${3:default-classnames}',",
      "        isMobile ? '${4:mobile-classnames}' : '${5:desktop-classnames}',",
      "        className",
      "      )}",
      "      {...props}",
      "    >",
      "      {isMobile ? (",
      "        // Mobile layout",
      "        <div className=\"${6:mobile-container-class}\">",
      "          {children}",
      "        </div>",
      "      ) : (",
      "        // Desktop layout",
      "        <div className=\"${7:desktop-container-class}\">",
      "          {children}",
      "        </div>",
      "      )}",
      "    </div>",
      "  );",
      "};",
      "",
    ],
    "description": "Create a responsive React component with mobile and desktop layouts",
  },
  "Create Data Fetch Component (FDD)": {
    "prefix": "fdd-query",
    "body": [
      "'use client';",
      "",
      "import React from 'react';",
      "import { useQuery } from '@tanstack/react-query';",
      "import { cn } from '@/lib/utils';",
      "",
      "interface ${1:ComponentName}Props {",
      "  className?: string;",
      "  // Add more props here",
      "}",
      "",
      "/**",
      " * ${1:ComponentName} Component",
      " * ",
      " * @description",
      " * ${2:Description of the component and its usage}",
      " * Fetches and displays data with loading/error states",
      " * ",
      " * @example",
      " * ```tsx",
      " * <${1:ComponentName} />",
      " * ```",
      " */",
      "export const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({",
      "  className,",
      "  // Destructure more props here",
      "  ...props",
      "}) => {",
      "  const { data, isLoading, error } = useQuery({",
      "    queryKey: ['${3:queryKey}'],",
      "    queryFn: async () => {",
      "      // Replace with your API call",
      "      const response = await fetch('${4:apiEndpoint}');",
      "      if (!response.ok) {",
      "        throw new Error('Failed to fetch data');",
      "      }",
      "      return response.json();",
      "    }",
      "  });",
      "",
      "  if (isLoading) {",
      "    return <div className=\"${5:loading-class}\">Loading...</div>;",
      "  }",
      "",
      "  if (error) {",
      "    return <div className=\"${6:error-class}\">Error: {error.message}</div>;",
      "  }",
      "",
      "  return (",
      "    <div className={cn('${7:default-classnames}', className)} {...props}>",
      "      {/* Render your data here */}",
      "      <pre>{JSON.stringify(data, null, 2)}</pre>",
      "    </div>",
      "  );",
      "};",
      "",
    ],
    "description": "Create a React component with React Query data fetching",
  },
}
